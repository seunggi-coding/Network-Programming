# 식별 연산자 (is, is not)

# 두 변수가 같은 객체를 참조하는지 확인하기 위해 식별 연산자 사용
a = [1, 2, 3]  # 리스트 a 생성
b = a  # b는 a와 같은 리스트를 참조
c = [1, 2, 3]  # c는 내용은 a와 같지만, 다른 메모리 위치에 있는 새로운 리스트

# 'is' 연산자 사용
print(a is b)  # True, a와 b는 동일한 객체(메모리 위치)를 참조
print(a is c)  # False, a와 c는 내용은 같지만 다른 객체

# 'is not' 연산자 사용
print(a is not c)  # True, a와 c는 다른 객체

# 값의 동등성 비교
print(a == b)  # True, a와 b는 동일한 내용을 가짐
print(a == c)  # True, a와 c는 같은 내용을 가지지만, 다른 객체

# 이유 설명:
# 'is'와 'is not' 식별 연산자는 객체의 식별자(메모리 주소)를 비교합니다.
# 따라서, a와 b가 같은 객체를 참조할 때 'is' 연산자는 True를 반환합니다.
# 반면, c는 a와 같은 값을 가지지만 다른 메모리 주소에 위치한 별도의 객체이므로,
# 'a is c'는 False를 반환하고, 'a is not c'는 True를 반환합니다.
# 값의 동등성을 확인하는 '==' 연산자는 변수가 참조하는 객체의 내용이 같은지를 비교하므로,
# a와 c는 같은 값을 가지고 있기 때문에 'a == c'는 True를 반환합니다.
